import pandas as pd
import os

samples_file=config["samples"]
samples_tbl=pd.read_csv(samples_file, header = None)
samples_tbl.columns=["Sample", "R1", "R2"]
samples_tbl=samples_tbl.set_index("Sample", drop=False)

def spades_input_R1(wildcards):
    sample=wildcards.samples
    if config["QC"] == 0:
        return samples_tbl.R1[sample]
    else:
        return os.path.join("read_QC", sample, sample+"_R1_trimmed.fastq.gz")

def spades_input_R2(wildcards):
    sample=wildcards.samples
    if config["QC"] == 0:
        return samples_tbl.R2[sample]
    else:
        return os.path.join("read_QC", sample, sample+"_R2_trimmed.fastq.gz")

rule all:
    input:
        expand("spades/{samples}", samples=samples_tbl.Sample)

rule read_QC:
    input:
        R1=lambda wildcards: samples_tbl.R1[wildcards.samples],
        R2=lambda wildcards: samples_tbl.R2[wildcards.samples]
    output:
        R1_trimmed=temp("read_QC/{samples}/{samples}_R1_trimmed.fastq.gz"),
        R2_trimmed=temp("read_QC/{samples}/{samples}_R2_trimmed.fastq.gz"),
        json="read_QC/{samples}/fastp.json",
        html="read_QC/{samples}/fastp.html"
    threads: 4
    shell:
        """
        fastp -i {input.R1} -I {input.R2} -o {output.R1_trimmed} -O {output.R2_trimmed} \
            -w {threads} -j {output.json} -h {output.html}
        """

rule spades:
    input:
        R1=spades_input_R1,
        R2=spades_input_R2
    output:
        "spades/{samples}"
    threads: 4
    shell:
        "spades.py -1 {input.R1} -2 {input.R2} -o {output} -t {threads}"